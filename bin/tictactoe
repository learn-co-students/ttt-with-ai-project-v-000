#!/usr/bin/env ruby

require_relative '../config/environment'

# Greet the user with a message.
# Prompt the user for what kind of game they want to play, 0, 1, or 2 player.
# Ask the user for who should go first and be "X".
# Use the input to correctly initialize a Game with the appropriate player types and token values.
# When the game is over, the CLI should prompt the user if they would like to play again and allow them to choose a new configuration for the game as described above. If the user doesn't want to play again, exit the program.

puts "Welcome to Tic Tac Toe with AI!"
play_again = "y"

until play_again.downcase == "n"
  puts "What type of game would you like to play?"
  puts "  0 - Computer v. Computer"
  puts "  1 - Player v. Computer"
  puts "  2 - Player v. Player"

  game_type = gets.strip
  until game_type == "0" || game_type == "1" || game_type == "2" || game_type == "wargames"
    puts "Please enter a valid game type."
    game_type = gets.strip
  end

  case game_type
    when "0"
      Game.new(Players::Computer.new("X"), Players::Computer.new("O")).play
    when "1"
      puts "Who should go first (and be \"X\")? Player (1) or Computer (2)"

      first = gets.strip

      until first == "1" || first == "2"
        puts "Please enter 1 or 2."
        first = gets.strip
      end

      if first == "1"
        Game.new(Players::Human.new("X"), Players::Computer.new("O")).play
      else
        Game.new(Players::Computer.new("X"), Players::Human.new("O")).play
      end
    when "2"
      Game.new.play
    when "wargames"
      won_count = 0

      100.times do
        won_count += Game.new(Players::Computer.new("X"), Players::Computer.new("O")).play
      end
      puts "The game was won #{won_count} times."
    else
      "Error"
  end

  puts "Would you like to play again? Y / N"
  play_again = gets.strip
end

puts "Goodbye."
