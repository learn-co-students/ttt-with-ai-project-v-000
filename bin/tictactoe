#!/usr/bin/env ruby

require_relative '../config/environment'

def top
  puts "Welcome to Tic-Tac-Toe (Object-Oriented Version)"
  puts "======================"
end

def pick_setup
  x = 3
  until [0,1,2].include?(x.to_i)
    puts "How many human players? (0, 1, 2)"
    x = gets.to_i
  end

  if x==0
    p1=Players::Computer.new("X")
    p2=Players::Computer.new("O")
  elsif x==1
    y=nil
    until y=="computer"|| y=="c" || y =="h" ||y=="human"
      system "clear"
      puts "Who should go first, the computer player or the human player? (h)uman or (c)omputer"
      y= gets.downcase.strip
    end
    if y=="human" || y =="h"
      p1=Players::Human.new("X")
      p2=Players::Computer.new("O")
    else
      p1=Players::Computer.new("X")
      p2=Players::Human.new("O")
    end
  else
    p1=Players::Human.new("X")
    p2=Players::Human.new("O")
  end
  Game.new(p1,p2)
end

top
x=nil
until x == "exit" || x == "e"
  system "clear"
  game=pick_setup
  game.play
  puts "Input (e)xit to end the game or anything else to play again."
  x=gets.strip.downcase
end

# * Greet the user with a message.
# * Prompt the user for what kind of game they want to play, 0,1, or 2 player.
# * Ask the user for who should go first and be "X".
# * Use the input to correctly initialize a `Game` with the appropriate player types and token values.
# * When the game is over, the CLI should prompt the user if they would like to play again and allow them to choose a new configuration for the game as described above. If the user doesn't want to play again, exit the program.
